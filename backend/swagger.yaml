openapi: 3.0.0
info:
  title: Lyrics Generator API
  description: API for generating lyrics in the style of various artists
  version: 1.0.0
  contact:
    email: internetarchitectureproject@gmail.com
servers:
  - url: https://lyrics-generator-backend-883px.ondigitalocean.app/api/v1
    description: Production server
  - url: http://localhost:3000/api/v1
    description: Local development server
tags:
  - name: Authentication
    description: User authentication and account management
  - name: Lyrics
    description: Lyrics generation
  - name: User
    description: User profile management
  - name: Admin
    description: Admin-only operations

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              first_name: John
              email: john@example.com
              password: securepassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and get a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: john@example.com
              password: securepassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Forgot password
      description: Request a password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
            example:
              email: john@example.com
      responses:
        '200':
          description: Reset link sent if email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: If that email exists in our system, a password reset link has been sent.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/verify-reset-token:
    get:
      tags:
        - Authentication
      summary: Verify reset token
      description: Verify if a password reset token is valid
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Token verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
              example:
                valid: true
        '400':
          description: Invalid token or email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset user password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 8
              required:
                - token
                - email
                - password
            example:
              token: 7f58d622a6
              email: john@example.com
              password: newSecurePassword123
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Password updated successfully
        '400':
          description: Invalid token, email, or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /generate-lyrics:
    post:
      tags:
        - Lyrics
      summary: Generate lyrics
      description: Generate lyrics in the style of a specified artist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateLyricsRequest'
            example:
              artist: Taylor Swift
              description: falling in love on a rainy day
              max_length: 100
              temperature: 0.9
              top_p: 0.95
              top_k: 5
              complete_song: true
      responses:
        '200':
          description: Lyrics generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateLyricsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: Request timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /user/profile:
    get:
      tags:
        - User
      summary: Get user profile
      description: Get the current user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Get a list of all users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileAdmin'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /admin/reset-api-count/{userId}:
    post:
      tags:
        - Admin
      summary: Reset API call count
      description: Reset a user's API call count to zero (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: API call count reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example:
                success: true
                message: API call count reset successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /admin/stats:
    get:
      tags:
        - Admin
      summary: Get API statistics
      description: Get general API usage statistics (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /admin/users/{id}:
    delete:
      tags:
        - Admin
      summary: Delete a user
      description: Delete a user account (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /admin/endpoint-stats:
    get:
      tags:
        - Admin
      summary: Get endpoint statistics
      description: Get usage statistics for all API endpoints (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Endpoint statistics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndpointStat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    RegisterRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - first_name
        - email
        - password
    
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    
    AuthResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
            email:
              type: string
              format: email
            firstName:
              type: string
            isAdmin:
              type: boolean
            apiCallsCount:
              type: integer
      example:
        message: Login successful
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          id: 123e4567-e89b-12d3-a456-426614174000
          email: john@example.com
          firstName: John
          isAdmin: false
          apiCallsCount: 5
    
    GenerateLyricsRequest:
      type: object
      properties:
        artist:
          type: string
          description: Artist whose style to emulate
          maxLength: 100
        description:
          type: string
          description: Description or theme of the lyrics
          maxLength: 500
        max_length:
          type: integer
          description: Maximum length of the generated lyrics
          minimum: 50
          maximum: 200
          default: 100
        temperature:
          type: number
          description: Sampling temperature (higher = more random)
          minimum: 0.1
          maximum: 1.0
          default: 0.9
        top_p:
          type: number
          description: Nucleus sampling parameter
          minimum: 0.1
          maximum: 1.0
          default: 0.95
        top_k:
          type: integer
          description: Top-k sampling parameter
          minimum: 1
          maximum: 100
          default: 5
        complete_song:
          type: boolean
          description: Whether to generate a complete song with structure
          default: true
      required:
        - artist
        - description
    
    GenerateLyricsResponse:
      type: object
      properties:
        lyrics:
          type: string
          description: The generated lyrics
        apiCallsCount:
          type: integer
          description: The user's current API call count
        limitReached:
          type: boolean
          description: Whether the user has reached their API call limit
        limitMessage:
          type: string
          description: Message about the API call limit (if reached)
      example:
        lyrics: "Verse 1:\nRaindrops falling on my window pane\nThinking of you again and again\n\nChorus:\nIn this storm I found you\nLightning strikes when I'm around you\n..."
        apiCallsCount: 15
        limitReached: false
        limitMessage: null
    
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        isAdmin:
          type: boolean
        apiCallsCount:
          type: integer
        createdAt:
          type: string
          format: date-time
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        email: john@example.com
        firstName: John
        isAdmin: false
        apiCallsCount: 5
        createdAt: 2023-06-15T10:30:00Z
    
    UserProfileAdmin:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        is_admin:
          type: boolean
        created_at:
          type: string
          format: date-time
        apiCallsCount:
          type: integer
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        email: john@example.com
        first_name: John
        is_admin: false
        created_at: 2023-06-15T10:30:00Z
        apiCallsCount: 5
    
    AdminStats:
      type: object
      properties:
        totalUsers:
          type: integer
          description: Total number of users
        totalApiCalls:
          type: integer
          description: Total number of API calls made
        usersAtLimit:
          type: integer
          description: Number of users who have reached the API call limit
        averageApiCallsPerUser:
          type: number
          description: Average number of API calls per user
      example:
        totalUsers: 150
        totalApiCalls: 2340
        usersAtLimit: 12
        averageApiCallsPerUser: 15.6
    
    EndpointStat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        endpoint:
          type: string
          description: API endpoint path
        method:
          type: string
          description: HTTP method
          enum: [GET, POST, PUT, DELETE]
        calls:
          type: integer
          description: Number of calls to this endpoint
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        endpoint: /api/v1/generate-lyrics
        method: POST
        calls: 1234
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details (optional)
      example:
        error: Invalid credentials
        details: Email or password is incorrect